#ifndef _vecmath_h_
#define _vecmath_h_
#define _gpu_ __device__

/**
 * 
 * Phil Estival
 * 
 *  In the end, implementing GLSL was easy
 * TODO:
 * - rgba accesors
 * - comparison with make_float3
 */

/** vectors **/



struct vec2; // forward decl for duo and trio
/*
 *  .xy, .xz
 */
struct duo {
    float * x;
    float * y;
	_gpu_ duo(float * a=0, float * b=0) { x=a;y=b; }
	_gpu_ void operator()( float *a, float*b) { x=a;y=b; }
    _gpu_ vec2 operator - ();
    _gpu_ void operator=(float a) { *x=a; *y=a; };
    _gpu_ void operator=(vec2);
    _gpu_ vec2 operator*(float);
    _gpu_ vec2 operator/(duo);
    _gpu_ vec2 operator+(vec2);
};

	

struct vec2 {
    duo xy,yx;
    float x,y;
    _gpu_ vec2(const float _x=0, const float _y=0): x(_x), y(_y) {
        xy(&x,&y);  yx(&y,&x);
	}
   /* _gpu_ vec2(float * _x,float * _y): x(*_x), y(*_y) {
        xy(_x,_y);  yx(_y,_x);
    }*/
    _gpu_ vec2(duo d): x(*d.x), y(*d.y) {
            xy(d.x,d.y);  yx(d.y,d.x);
    }
    //_gpu_ vec2( float f ):vec2(f,f){}
    //_gpu_ vec2( ):vec2(0,0){}

	_gpu_ vec2 operator = (const float f) { return vec2(f,f); }
        //_gpu_ vec2 operator = (duo d) { return vec2(d.x,d.y); }
    _gpu_ vec2 operator + (float f) { return vec2(x+f, y+f); }
    _gpu_ vec2 operator + (vec2 v) { return vec2(x+v.x, y+v.y); }
    _gpu_ vec2 operator - (vec2 v) { return vec2(x-v.x, y-v.y); }
    _gpu_ vec2 operator * (vec2 v) { return vec2(x*v.x, y*v.y); }
    _gpu_ vec2 operator / (vec2 v) { return vec2(x/v.x, y/v.y); }
    _gpu_ vec2 operator - () { return vec2(-x, -y); }
    _gpu_ vec2 operator * (float f) { return vec2(x*f, y*f); }
    _gpu_ vec2 operator * (duo d)   { return vec2(x-*(d.x), y-*(d.y)); }
    _gpu_ vec2 operator / (float f) { return vec2(x/f, y/f); }
};
_gpu_ vec2 operator + (float f, vec2 v ) { return v+f; }
_gpu_ vec2 operator * (float f, vec2 v) {  return v*f; } 

_gpu_ float length(vec2 v) { return sqrt(v.x * v.x + v.y * v.y ) ; }

_gpu_ void duo::operator = (vec2 v) { *(x)=v.x; *(y)=v.y;  }
_gpu_ vec2 duo::operator / (duo b) { return vec2( (*x)/ *(b.x), (*y)/ *(b.y) ); }
_gpu_ vec2 duo::operator * (float f) { return vec2( (*x)*f, (*y)*f);  }
_gpu_ vec2 duo::operator + (vec2 v) { return vec2( (*x)+v.x, (*y)+v.y);  }
_gpu_ vec2 duo::operator - () { return vec2(- *x, - *y); }


/**
 *  vec3 
 */

struct vec3;

struct trio {
	float * x;
	float * y;
	float * z;
	_gpu_ trio(float * a=0, float * b=0, float * c=0) { x=a; y=b; z=c; }
	_gpu_ void operator()( float *a, float*b, float*c) { x=a;y=b;z=c; }
    _gpu_ void operator=(float a) { *x=a; };
    _gpu_ void operator=(vec2 v) { *x=v.x; *y=v.y; };
    _gpu_ vec3 operator+(vec3);
};


struct vec3 : public vec2 {
    duo xz, zx, yz, zy;
    trio xyz,yzx;

    float z;
    //float &r=x;
    _gpu_ vec3( float a=0, float b=0, float c=0):vec2(a,b),z(c) {
		xz(&x,&z);		zx(&z,&x);
		yz(&y,&z);		zy(&z,&y);
        xyz(&x,&y,&z);  yzx(&y,&z,&x);
	}
    _gpu_ vec3( vec2 v, float c ):vec2(v.x,v.y),z(c){}
    /* mandatory. otherwise compiler will throw :
    implicitly generated assignment operator cannot copy:
    reference member "vec2::r"
    detected during implicit generation of "vec2 &vec2::operator=(const vec2 &)
    */
    //_gpu_ vec3 operator=(const vec3 & v){ return v;}

	//_gpu_ vec3 xyz() { return vec3(x,y,z); }
    _gpu_ vec3 operator = (const float f) { return vec3(f,f,f); }
	_gpu_ vec3 operator + (float f) {  return vec3(x+f, y+f, z+f); }
	_gpu_ vec3 operator + (vec3 v)  {  return vec3(x+v.x, y+v.y, z+v.z); }
	_gpu_ vec3 operator * (float f) {  return vec3(x*f, y*f, z*f); }
	_gpu_ vec3 operator * (vec3 v)  {  return vec3(x*v.x, y*v.y, z*v.z); }
	_gpu_ vec3 operator - (vec3 v)  {  return vec3(x-v.x, y+v.x, z-v.z); }
	_gpu_ void operator +=(vec3 v)  {  x+=v.x, y+=v.y, z+=v.z; }
    _gpu_ void operator *=(float f)  {  x*=f, y*=f, z*=f; }
	//_gpu_ vec3 operator*(float f, vec3 f);
};

_gpu_ vec3 operator*(float f, vec3 v) {  return v*f; } 
_gpu_ vec3 operator-(trio u, const vec3 v) { return vec3( *(u.x)-v.x, *(u.y)-v.y, *(u.z)-v.z);}


/**
 *  vec4 
 */
struct vec4 : vec3 {
	float z,w;
	duo xw, wx,
                yw, wy,
                zw, wz;
		
	_gpu_ vec4(float a=0,float b=0,float c=0,float d=0) : vec3(a,b,c), w(d)
	{ 
                xw(&x,&w);	wx(&w,&x);		yw(&y,&w);	wy(&w,&y);
	}
	
	_gpu_ vec4(vec3 v,float d=0) : vec3(v.x,v.y,v.z) , w(d) { 
                xw(&x,&w);	wx(&w,&x);		yw(&y,&w);	wy(&w,&y);
	}
	
        _gpu_ vec3 operator+(const float f) { return vec4( x+f,y+f,z+f,w+f );}
        _gpu_ vec3 operator-(const float f) { return vec4( x-f,y-f,z-f,w-f );}
        _gpu_ vec4 operator+(const vec4& v) { return vec4( x+v.x,y+v.y,z+v.z,w+v.w );}
        _gpu_ vec4 operator*(const vec4& v) { return vec4( x+v.x,y+v.y,z+v.z,w+v.w );}
        _gpu_ void operator*=(float f)  {  x*=f, y*=f, z*=f, w*=f; }
        _gpu_ void operator<<(const vec2 v) { x=v.x; y=v.y; };
	/*
	_gpu_ vec2 zw() { return vec2(z,w); }
	_gpu_ vec2 yw() { return vec2(y,w); }*/
	//friend _gpu_ vec4 operator*(const float f, const vec4& v);
};

_gpu_ vec4 operator+(const float f, const vec4& v) { return vec4( f+v.x, f+v.y, f+v.z, f+v.w);}
_gpu_ vec4 operator-(const float f, const vec4& v) { return vec4( f-v.x, f-v.y, f-v.z, f-v.w);}
_gpu_ vec4 operator*(const float f, const vec4& v) { return vec4( f*v.x, f*v.y, f*v.z, f*v.w);}


			/** vector functions **/

_gpu_ float mod(float x,float y) { return x - y * floorf(x/y); }
_gpu_ float dot(vec2 v1, vec2 v2) { return ( v1.x * v2.x + v1.y * v2.y ); }
_gpu_ float dot(vec3 v1, vec3 v2) { return ( v1.x * v2.x + v1.y * v2.y + v1.z * v2.z ); }
_gpu_ float length(vec3 v) { return sqrt(v.x * v.x + v.y * v.y + v.z * v.z ) ; }
_gpu_ vec3 normalize(vec3 v) { 
	float L = length( v );
   	if( L == 0 ) {return 0;	}
   	else { 
		L  = 1 / L;
		return  ( v*L );
	}
}

	
_gpu_ vec3 floor(vec3 v) { return vec3( floorf(v.x),floorf(v.y),floorf(v.z) );}
_gpu_ vec3 cos(vec3 v) { return vec3( cos(v.x),cos(v.y),cos(v.z) );}
_gpu_ vec3 sin(vec3 v) { return vec3( sin(v.x),sin(v.y),sin(v.z) );}
_gpu_ vec4 cos(vec4 v) { return vec4( cos(v.x),cos(v.y),cos(v.z),cos(v.w) );}
_gpu_ vec4 sin(vec4 v) { return vec4( sin(v.x),sin(v.y),sin(v.z),cos(v.w) );}

_gpu_ vec3 min(vec3 v, float f) { return vec3(min(v.x,f), 
                                              min(v.y,f),
                                              min(v.z,f)); }

_gpu_ vec3 fract(vec3 x) { return x-floor(x); }
_gpu_ float fract(float x) { return x-floor(x); }

_gpu_ float mix(float x, float y, float a) { return x*(1-a) + y*a;}

_gpu_ vec2 mix(duo u, duo v, float a) { 
        return vec2( *(u.x)*(1-a) + *(v.x)*a,
                                 *(u.y)*(1.0f-a) + *(v.y)*a);
}


_gpu_ vec4 mix(vec4 u, vec4 v, float a) { 
	return vec4( u.x*(1-a) + v.x*a,
				 u.y*(1.0f-a) + v.y*a,
				 u.z*(1.0f-a) + v.z*a,
				 u.w*(1.0f-a) + v.w*a );
}

_gpu_ vec3 mix(vec3 u, vec3 v, float a) { 
	return vec3( u.x*(1-a) + v.x*a,
				 u.y*(1.0f-a) + v.y*a,
				 u.z*(1.0f-a) + v.z*a );
}


#endif
